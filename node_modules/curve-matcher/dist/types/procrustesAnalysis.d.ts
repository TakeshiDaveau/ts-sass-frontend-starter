import { Point } from './geometry';
export interface ProcrustesNormalizeCurveOpts {
    rebalance?: boolean;
    estimationPoints?: number;
}
/**
 * Translate and scale curve by Procrustes Analysis
 *
 * Optionally runs [[rebalanceCurve]] first (default true)
 * from https://en.wikipedia.org/wiki/Procrustes_analysis
 * @param curve
 * @param options
 */
export declare const procrustesNormalizeCurve: (curve: Point[], options?: ProcrustesNormalizeCurveOpts) => Point[];
/**
 * Find the angle to rotate `curve` to match the rotation of `relativeCurve` using procrustes analysis
 *
 * from https://en.wikipedia.org/wiki/Procrustes_analysis
 * `curve` and `relativeCurve` must have the same number of points
 * `curve` and `relativeCurve` should both be run through [[procrustesNormalizeCurve]] first
 * @param curve
 * @param relativeCurve
 */
export declare const findProcrustesRotationAngle: (curve: Point[], relativeCurve: Point[]) => number;
/**
 * Rotate `curve` to match the rotation of `relativeCurve` using procrustes analysis
 *
 * from https://en.wikipedia.org/wiki/Procrustes_analysis
 * `curve` and `relativeCurve` must have the same number of points
 * `curve` and `relativeCurve` should both be run through [[procrustesNormalizeCurve]] first
 * @param curve
 * @param relativeCurve
 */
export declare const procrustesNormalizeRotation: (curve: Point[], relativeCurve: Point[]) => Point[];
